name: Experiment 7 CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  lint:
    name: Lint the code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linting tools
        run: |
          pip install black ruff

      - name: Run Black
        run: black --check .

      - name: Run Ruff
        run: ruff check .

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install test dependencies
        run: |
          pip install pytest
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Run pytest
        run: pytest || echo "No tests found"

  build:
    name: Build and run DVC pipeline
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install dvc[s3]
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Pull data and models with DVC (safe mode)
        run: |
          if dvc remote list; then
            echo "Remote detected — pulling data..."
            dvc pull --force || echo "No remote data found, skipping DVC pull"
          else
            echo "No DVC remote configured — skipping DVC pull"
          fi

      - name: Run DVC pipeline
        run: dvc repro || echo "No DVC pipeline found"

      - name: Show DVC status
        run: dvc status || echo "No DVC status to show"
